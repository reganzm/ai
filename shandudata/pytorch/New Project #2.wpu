#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'qRTBMgOnAFwJqqsC0rQ1RTNH8S'\
        'GRC9vN',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [3,
                                   1],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.2652037617554859,
                 'override_title': None,
                 'pagelist': [('debug-io',
                               'tall',
                               0,
                               {}),
                              ('python-shell',
                               'tall',
                               0,
                               {'active-range': (None,
        -1,
        -1),
                                'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'history': {None: ['torch_tensor1.type()\n',
        'a = torch.randn(3,2)\n',
        "a.type('float')\n",
        'a.type(torch.FloatTensor).numpy()\n',
        'a.type(torch.FloatTensor).numpy().dtype\n',
        'a.type(torch.DoubleTensor).numpy().dtype\n',
        'torch.ones(2,2)\n',
        'x = torch.ones(2,2)\n',
        'x.int()\n',
        'x.double()\n',
        'a = torch.randn(5,4)\n',
        'torch.max(a)\n',
        'torch.max(a,dim=0)\n',
        'torch.max(a,dim=1)\n',
        'b = torch.randn(2,3,4)\n',
        'b.shape\n',
        'b.max()\n',
        'b.max(dim=1)\n',
        'b.max(dim=1).shape\n',
        'b.max(dim=0)\n',
        'c = torch.randn(2,3)\n',
        'c.max(0)\n',
        'c.max(1)\n',
        'c.sum()\n',
        'c.sum(dim=0)\n',
        'c.sum(dim=1)\n',
        'c.sum(dim=2)\n',
        'c\n',
        'c.shape\n',
        'c.unsqueeze(0)\n',
        'c.unsqueeze(3)\n',
        'c.unsqueeze(2)\n',
        'c.unsqueeze(2).shape\n',
        'c.squeeze(2).shape\n',
        'c.squeeze(1).shape\n',
        'c.squeeze(1)\n',
        'a = torch.ones(4,4)\n',
        'a.type(torch.FloatTensor)\n',
        'a[1:3,1:3]=9\n',
        'a\n',
        'from torch.autograd import Variable\n',
        'b = Variable(a)\n',
        'b = Variable(a,requires_grad=True)\n',
        'b.grad_fn\n',
        'b.backward(retain_graph=None, create_graph=False)\n',
        'import matplotlib.pyplot as plt\n',
        'x = np.arange(-4,4,0.01)\n',
        'y=x**3\n',
        'plt.plot(x,y)\n',
        "plt.plot(2,4,'rs')\n",
        'x = Variable(torch.tensor(10),requires_grad=True)\n',
        'x = Variable(torch.tensor(10.),requires_grad=True)\n',
        'y = x+5\n',
        'z = y**5+5\n',
        'print(z)\n',
        'x = Variable(torch.Tensor(2),requires_grad=True)\n',
        'y\n',
        'x\n',
        'x = Variable(torch.Tensor([2]),requires_grad=True)\n',
        'y = x + 2\n',
        'z = y**2+3\n',
        'z\n',
        'z.backward()\n',
        'x.grad_fn\n',
        'x.data\n',
        'x.grad\n',
        'import torch\n',
        'first_counter = torch.Tensor([0])\n',
        'second_counter = torch.Tensor([10])\n',
        'while first_counter<second_counter:\n      first_counter+=2\n      '\
        'second_counter+=1\n\n',
        'print(first_counter)\n',
        'print(second_counter)\n',
        'import torch\nimport numpy as np\nfrom torch.autograd import Variab'\
        'le\n\ntorch.manual_seed(2017)\n\n',
        'x_train = np.array([[3.3], [4.4], [5.5], [6.71], [6.93], [4.168],\n'\
        '                    [9.779], [6.182], [7.59], [2.167], [7.042],\n  '\
        '                  [10.791], [5.313], [7.997], [3.1]], dtype=np.floa'\
        't32)\n\ny_train = np.array([[1.7], [2.76], [2.09], [3.19], [1.694],'\
        ' [1.573],\n                    [3.366], [2.596], [2.53], [1.221], ['\
        '2.827],\n                    [3.465], [1.65], [2.904], [1.3]], dtyp'\
        'e=np.float32)\n\n',
        "plt.plot(x_train,y_train,'bo')\n",
        'x_train = torch.from_numpy(x_train)\ny_train = torch.from_numpy(y_t'\
        'rain)\n\n',
        'w = Variable(torch.randn(1), requires_grad=True) # \xe9\x9a\x8f\xe6'\
        '\x9c\xba\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\nb = Variable(torch.ze'\
        'ros(1), requires_grad=True) # \xe4\xbd\xbf\xe7\x94\xa8 0 \xe8\xbf\x9b'\
        '\xe8\xa1\x8c\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\n',
        'w\n',
        'b\n',
        'def linear_model(x):\n     return x*w+b\n\n',
        "plt.plot(x_train.numpy(),y_train.numpy(),'ro')\n",
        "plt.plot(x_train.numpy(),y_.numpy(),'ro')\n",
        "plt.plot(x_train.numpy(),y_,'ro')\n",
        'y_\n',
        "plt.plot(x_train,y_,'ro')\n",
        'x_train = Variable(x_train)\ny_train = Variable(y_train)\n\n',
        'y_ = linear_model(x_train)\n\n',
        "plt.plot(x_train.data.numpy(), y_.data.numpy(), 'ro', label='estima"\
        "ted'\n\n\n\n )\n",
        'def get_loss(y_,y):\n     return torch.mean((y_-y)**2)\n\n',
        'loss = get_loss(y_,y_train)\n',
        'loss\n',
        'loss.backward()\n',
        'w.grad\n',
        'b.grad\n',
        'w.data = w.data-0.01*w.grad.data\n',
        'b.data = b.data - 0.01*b.grad.data\n',
        'w.data\n',
        'b.data\n',
        'y_ = linear_model(x_train)\n',
        "plt.plot(x_train.data.numpy(), y_.data.numpy(), 'ro', label='estima"\
        "ted')\n"]},
                                'launch-id': None,
                                'sel-line': 39L,
                                'sel-line-start': 731L,
                                'selection_end': 731L,
                                'selection_start': 731L,
                                'zoom': 0L}),
                              ('debug-probe',
                               'tall',
                               0,
                               {'active-range': (None,
        -1,
        -1),
                                'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'history': {},
                                'launch-id': None,
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 0L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(0,
        25)],
                                 'top-node': (0,)},
                        'flat': {'expanded-nodes': [(0,),
        (1,)],
                                 'selected-nodes': [(0,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('file:D:/softwares/Anaconda3/Lib/site-packages/gym/envs/classic_control/cartpole.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('file:D:/softwares/Anaconda3/Lib/site-packages/gym/envs/classic_control/cartpole.py'),
                             'CartPoleEnv')]],
        'top-node': [('class def',
                      loc('file:D:/softwares/Anaconda3/Lib/site-packages/gym/envs/classic_control/cartpole.py'),
                      'CartPoleEnv')]},
        loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/autograd/__init__.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/autograd/anomaly_mode.py'),
                      '')]},
        loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/nn/modules/module.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/nn/modules/module.py'),
                      'Module')]},
        loc('file:D:/softwares/Anaconda3/lib/urllib/request.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('file:D:/softwares/Anaconda3/lib/urllib/request.py'),
                             '__version__')]],
        'top-node': [('class def',
                      loc('file:D:/softwares/Anaconda3/lib/urllib/request.py'),
                      'AbstractBasicAuthHandler')]},
        loc('../bi-analysis/bi/ext/certificate.py'): {'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../bi-analysis/bi/ext/certificate.py'),
                             'statistic_main')]],
        'top-node': [('generic attribute',
                      loc('../bi-analysis/bi/ext/certificate.py'),
                      'args')]},
        loc('../bi-analysis/bi/statistic/statistic_dimension.py'): {'expande'\
        'd-nodes': [],
        'selected-nodes': [[('function def',
                             loc('../bi-analysis/bi/statistic/statistic_dimension.py'),
                             'statistic_median_salary')]],
        'top-node': [('function def',
                      loc('../bi-analysis/bi/statistic/statistic_dimension.py'),
                      'add_rank')]},
        loc('../jupyter/test/test.py'): {'expanded-nodes': [],
        'selected-nodes': [None],
        'top-node': None},
        loc('src/DCGAN.py'): {'expanded-nodes': [],
                              'selected-nodes': [],
                              'top-node': [('class def',
        loc('src/DCGAN.py'),
        'build_dc_generator')]},
        loc('src/DeepQLearning.py'): {'expanded-nodes': [],
                                      'selected-nodes': [[('generic attribut'\
        'e',
        loc('src/DeepQLearning.py'),
        'a')]],
                                      'top-node': [('generic attribute',
        loc('src/DeepQLearning.py'),
        'a')]},
        loc('src/Gan.py'): {'expanded-nodes': [],
                            'selected-nodes': [[('generic attribute',
        loc('src/Gan.py'),
        'batch_size')]],
                            'top-node': [('generic attribute',
        loc('src/Gan.py'),
        'batch_size')]},
        loc('src/Gan1.py'): {'expanded-nodes': [],
                             'selected-nodes': [],
                             'top-node': [('generic attribute',
        loc('src/Gan1.py'),
        'batch_size')]},
        loc('src/LSGAN.py'): {'expanded-nodes': [],
                              'selected-nodes': [],
                              'top-node': [('generic attribute',
        loc('src/LSGAN.py'),
        'batch_size')]},
        loc('src/Q-learning.py'): {'expanded-nodes': [],
                                   'selected-nodes': [[('generic attribute',
        loc('src/Q-learning.py'),
        'valid_actions')]],
                                   'top-node': [('generic attribute',
        loc('src/Q-learning.py'),
        'action')]},
        loc('src/SimpleGAN.py'): {'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': [('generic attribute',
        loc('src/SimpleGAN.py'),
        'batch_size')]},
        loc('src/Variational_autoencoder.py'): {'expanded-nodes': [],
        'selected-nodes': [None],
        'top-node': None},
        loc('src/conv_Autoencoder.py'): {'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('src/conv_Autoencoder.py'),
                             'autoencoder')]],
        'top-node': [('class def',
                      loc('src/conv_Autoencoder.py'),
                      'autoencoder')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.28495339547270304,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'location'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': True,
                                       'fSearchText': u'',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': ''})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('src/conv_Autoencoder.py'),
        {'attrib-starts': [],
         'first-line': 0L,
         'folded-linenos': [],
         'sel-line': 5L,
         'sel-line-start': 134L,
         'selection_end': 167L,
         'selection_start': 158L,
         'zoom': 0L},
        1540349401.788],
        [loc('src/Variational_autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 68L,
          'folded-linenos': [],
          'sel-line': 93L,
          'sel-line-start': 2464L,
          'selection_end': 2481L,
          'selection_start': 2481L,
          'zoom': 0L},
         1540349401.804],
        [loc('src/Variational_autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 31L,
          'sel-line-start': 679L,
          'selection_end': 714L,
          'selection_start': 705L,
          'zoom': 0L},
         1540349405.773],
        [loc('src/Variational_autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 611L,
          'selection_end': 626L,
          'selection_start': 617L,
          'zoom': 0L},
         1540349407.063],
        [loc('src/Variational_autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 27L,
          'sel-line-start': 584L,
          'selection_end': 597L,
          'selection_start': 588L,
          'zoom': 0L},
         1540349408.342],
        [loc('src/Variational_autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 546L,
          'selection_end': 559L,
          'selection_start': 550L,
          'zoom': 0L},
         1540349409.204],
        [loc('src/Variational_autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 2L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 192L,
          'selection_end': 225L,
          'selection_start': 216L,
          'zoom': 0L},
         1540349412.688],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 59L,
          'folded-linenos': [],
          'sel-line': 75L,
          'sel-line-start': 1947L,
          'selection_end': 2004L,
          'selection_start': 2004L,
          'zoom': 0L},
         1540349412.704],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 31L,
          'sel-line-start': 641L,
          'selection_end': 676L,
          'selection_start': 667L,
          'zoom': 0L},
         1540349414.937],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 579L,
          'selection_end': 592L,
          'selection_start': 583L,
          'zoom': 0L},
         1540349415.591],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 27L,
          'sel-line-start': 551L,
          'selection_end': 564L,
          'selection_start': 555L,
          'zoom': 0L},
         1540349416.83],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 513L,
          'selection_end': 526L,
          'selection_start': 517L,
          'zoom': 0L},
         1540349417.325],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 2L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 147L,
          'selection_end': 180L,
          'selection_start': 171L,
          'zoom': 0L},
         1540349420.905],
        [loc('src/SimpleGAN.py'),
         {'attrib-starts': [],
          'first-line': 36L,
          'folded-linenos': [],
          'sel-line': 64L,
          'sel-line-start': 1821L,
          'selection_end': 1821L,
          'selection_start': 1821L,
          'zoom': 0L},
         1540349420.922],
        [loc('src/SimpleGAN.py'),
         {'attrib-starts': [],
          'first-line': 51L,
          'folded-linenos': [],
          'sel-line': 65L,
          'sel-line-start': 1823L,
          'selection_end': 1885L,
          'selection_start': 1876L,
          'zoom': 0L},
         1540349426.875],
        [loc('src/Simple_Autoencoder.py'),
         {'attrib-starts': [],
          'first-line': 2L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 147L,
          'selection_end': 180L,
          'selection_start': 171L,
          'zoom': 0L},
         1540365477.623],
        [loc('src/Convolution_Network.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 154L,
          'selection_end': 187L,
          'selection_start': 178L,
          'zoom': 0L},
         1540365477.626],
        [loc('src/Data_Utils.py'),
         {'attrib-starts': [('Dictionary',
                             4),
                            ('Dictionary.__len__',
                             15)],
          'first-line': 9L,
          'folded-linenos': [],
          'sel-line': 15L,
          'sel-line-start': 391L,
          'selection_end': 413L,
          'selection_start': 413L,
          'zoom': 0L},
         1540365477.629],
        [loc('src/Seq_Lstm.py'),
         {'attrib-starts': [],
          'first-line': 24L,
          'folded-linenos': [],
          'sel-line': 95L,
          'sel-line-start': 3223L,
          'selection_end': 3260L,
          'selection_start': 3260L,
          'zoom': 0L},
         1540365477.631],
        [loc('src/SimpleGAN.py'),
         {'attrib-starts': [('preprocess_img',
                             14)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 383L,
          'selection_end': 383L,
          'selection_start': 383L,
          'zoom': 0L},
         1540365480.28]],
        20),
        'current-loc': None,
        'editor-state-list': [],
        'has-focus': False,
        'locked': False},
        []),
                               'open_files': []},
        'saved_notebook_display': None,
        'split_percents': {0: 0.48253968253968255},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 1.0},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (123,
                         78,
                         1085,
                         681)}]}
guimgr.recent-documents = [loc('src/SimpleGAN.py'),
                           loc('src/Simple_Autoencoder.py'),
                           loc('src/Variational_autoencoder.py'),
                           loc('src/Convolution_Network.py'),
                           loc('src/Seq_Lstm.py'),
                           loc('src/Data_Utils.py')]
guimgr.visual-state = {loc('file:D:/softwares/Anaconda3/Lib/site-packages/gym/envs/classic_control/cartpole.py'): {'a'\
        'ttrib-starts': [('CartPoleEnv',
                          12),
                         ('CartPoleEnv.__init__',
                          18)],
        'first-line': 42L,
        'folded-linenos': [],
        'sel-line': 44L,
        'sel-line-start': 1364L,
        'selection_end': 1389L,
        'selection_start': 1389L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/site-packages/matplotlib/axes/_base.py'): {'a'\
        'ttrib-starts': [('_process_plot_var_args',
                          142),
                         ('_process_plot_var_args._xy_from_xy',
                          212)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 242L,
        'sel-line-start': 8114L,
        'selection_end': 8114L,
        'selection_start': 8114L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/nn/functional.py'): {'a'\
        'ttrib-starts': [('log_softmax',
                          959)],
        'first-line': 945L,
        'folded-linenos': [],
        'sel-line': 973L,
        'sel-line-start': 36927L,
        'selection_end': 36927L,
        'selection_start': 36927L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/nn/modules/conv.py'): {'a'\
        'ttrib-starts': [('Conv2d',
                          178),
                         ('Conv2d.forward',
                          298)],
        'first-line': 273L,
        'folded-linenos': [],
        'sel-line': 300L,
        'sel-line-start': 13295L,
        'selection_end': 13295L,
        'selection_start': 13295L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/nn/modules/module.py'): {'a'\
        'ttrib-starts': [('Module',
                          22),
                         ('Module.cuda',
                          243)],
        'first-line': 255L,
        'folded-linenos': [],
        'sel-line': 257L,
        'sel-line-start': 10122L,
        'selection_end': 10122L,
        'selection_start': 10122L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/site-packages/torch/utils/data/dataloader.py'): {'a'\
        'ttrib-starts': [('_DataLoaderIter',
                          234),
                         ('_DataLoaderIter.__next__',
                          310)],
        'first-line': 201L,
        'folded-linenos': [],
        'sel-line': 313L,
        'sel-line-start': 11486L,
        'selection_end': 11521L,
        'selection_start': 11511L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/site-packages/torchvision/utils.py'): {'a'\
        'ttrib-starts': [('save_image',
                          89)],
        'first-line': 84L,
        'folded-linenos': [],
        'sel-line': 97L,
        'sel-line-start': 4013L,
        'selection_end': 4020L,
        'selection_start': 4020L,
        'zoom': 0L},
                       loc('file:D:/softwares/Anaconda3/lib/urllib/request.py'): {'a'\
        'ttrib-starts': [('AbstractHTTPHandler',
                          1224),
                         ('AbstractHTTPHandler.do_open',
                          1275)],
        'first-line': 1261L,
        'folded-linenos': [],
        'sel-line': 1319L,
        'sel-line-start': 48385L,
        'selection_end': 48385L,
        'selection_start': 48385L,
        'zoom': 0L},
                       loc('Linear_Regression.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 39L,
        'sel-line-start': 1136L,
        'selection_end': 1168L,
        'selection_start': 1136L,
        'zoom': 0L},
                       loc('src/Bag_Of_Words.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 912L,
        'selection_end': 983L,
        'selection_start': 983L,
        'zoom': 0L},
                       loc('src/Convolution_Network.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 154L,
        'selection_end': 187L,
        'selection_start': 178L,
        'zoom': 0L},
                       loc('src/DCGAN.py'): {'attrib-starts': [('train_dc_ga'\
        'n',
        148)],
        'first-line': 162L,
        'folded-linenos': [],
        'sel-line': 182L,
        'sel-line-start': 6228L,
        'selection_end': 6254L,
        'selection_start': 6254L,
        'zoom': 0L},
                       loc('src/Data_Utils.py'): {'attrib-starts': [('Dictio'\
        'nary',
        4),
        ('Dictionary.__len__',
         15)],
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 391L,
        'selection_end': 413L,
        'selection_start': 413L,
        'zoom': 0L},
                       loc('src/DeepQLearning.py'): {'attrib-starts': [('DQN',
        36)],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 36L,
        'sel-line-start': 1028L,
        'selection_end': 1046L,
        'selection_start': 1046L,
        'zoom': 0L},
                       loc('src/Gan.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 75L,
        'sel-line-start': 2300L,
        'selection_end': 2300L,
        'selection_start': 2300L,
        'zoom': 0L},
                       loc('src/LSGAN.py'): {'attrib-starts': [('train_a_gan',
        120)],
        'first-line': 132L,
        'folded-linenos': [],
        'sel-line': 155L,
        'sel-line-start': 5263L,
        'selection_end': 5286L,
        'selection_start': 5286L,
        'zoom': 0L},
                       loc('src/Linear_Regression.py'): {'attrib-starts': [('L'\
        'inearRegression',
        21),
        ('LinearRegression.__init__',
         22)],
        'first-line': 12L,
        'folded-linenos': [],
        'sel-line': 24L,
        'sel-line-start': 774L,
        'selection_end': 805L,
        'selection_start': 799L,
        'zoom': 0L},
                       loc('src/Logistic_Regression.py'): {'attrib-starts': [],
        'first-line': 102L,
        'folded-linenos': [],
        'sel-line': 86L,
        'sel-line-start': 2886L,
        'selection_end': 2943L,
        'selection_start': 2943L,
        'zoom': 0L},
                       loc('src/Neurul_Network.py'): {'attrib-starts': [],
        'first-line': 66L,
        'folded-linenos': [],
        'sel-line': 89L,
        'sel-line-start': 2985L,
        'selection_end': 2985L,
        'selection_start': 2985L,
        'zoom': 0L},
                       loc('src/Q-learning.py'): {'attrib-starts': [],
        'first-line': 15L,
        'folded-linenos': [],
        'sel-line': 36L,
        'sel-line-start': 1477L,
        'selection_end': 1537L,
        'selection_start': 1537L,
        'zoom': 0L},
                       loc('src/Recurrent_Network.py'): {'attrib-starts': [],
        'first-line': 72L,
        'folded-linenos': [],
        'sel-line': 83L,
        'sel-line-start': 2722L,
        'selection_end': 2722L,
        'selection_start': 2722L,
        'zoom': 0L},
                       loc('src/Seq_Lstm.py'): {'attrib-starts': [],
        'first-line': 24L,
        'folded-linenos': [],
        'sel-line': 95L,
        'sel-line-start': 3223L,
        'selection_end': 3260L,
        'selection_start': 3260L,
        'zoom': 0L},
                       loc('src/SimpleGAN.py'): {'attrib-starts': [('preproc'\
        'ess_img',
        14)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 383L,
        'selection_end': 383L,
        'selection_start': 383L,
        'zoom': 0L},
                       loc('src/Simple_Autoencoder.py'): {'attrib-starts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 147L,
        'selection_end': 180L,
        'selection_start': 171L,
        'zoom': 0L},
                       loc('src/Variational_autoencoder.py'): {'attrib-start'\
        's': [],
        'first-line': 68L,
        'folded-linenos': [],
        'sel-line': 93L,
        'sel-line-start': 2464L,
        'selection_end': 2481L,
        'selection_start': 2481L,
        'zoom': 0L},
                       loc('src/conv_Autoencoder.py'): {'attrib-starts': [('t'\
        'o_img',
        14)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 431L,
        'selection_end': 443L,
        'selection_start': 443L,
        'zoom': 0L},
                       loc('src/linear.pth'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('src/logger.py'): {'attrib-starts': [('Logger',
        9)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 193L,
        'selection_end': 214L,
        'selection_start': 214L,
        'zoom': 0L},
                       loc('src/mlp_img/image_0.png'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.default-encoding = 'utf_8'
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'D:\\softwares\\Anaconda3\\python.exe')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'transform',
                         u'trans',
                         u'tran',
                         u'train',
                         u'trainsf',
                         u'trains',
                         u'discriminator_loss',
                         u'get_optimizer']
testing.stored-results = (1,
                          [],
                          {})
